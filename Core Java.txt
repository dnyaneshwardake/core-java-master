Core Java

Features of Java 

1. Simple
2. Object Oriented Proframming
3. Platform Independant - Can run same class file on multiple platforms/operating system
4. Portable - We can carry .class files and run on diffrent machines
5. Secured - No pointers in Java like in C++, C
6. Multithreaded - 
7. Architectural Nutral - Java works on 32/x86 bit and x64 bit operating system (platform)
8. High Performence - By using thrads, Memory managmnet (JVM - Garbage collector)
9. Dynanmic - We can load classes dynamically


C++ vs Java diffrence

1. C++ is platform dependant , Java is platform independant.
2. C++ is used for system programming, Java used in Application development, Website, Application, Banking Application
3. C++ have pointer concepts, Java don't have pointers.
4. Multiple inheritence possible in C++, Not possible in Java (ambugity while resolving methods call)
5. In C++ we have call by value and call by reference, In java we have only call by value
6. C++ Multithreading support but using 3rd party lib. Java has inbuild support for Multithreading


JVM / JRE / JDK

JVM: Java Virtual Machine

About JVM: 
i)  JVM is platform dependant, for windows its diffrent installation and for Unix/Linux its diffrent installation. 
	Because configuration of each Operating system is diffrent.

Steps for java code execution:
1. .class file created (after compilation)
2. Class loaders 
3. Bytecode Verify .class file
4. Interpreater (Computer understandable code )
5. Run .class file


JRE: Java Runtime Environment (also reffred as RTE)

1. Is set of libraries/jars (rt.jar, resources.jar, etc) , Used while running code in JVM.


JDK: Java Developement Kit
 -- Java 7, Java 8, Java 11, Current version Java 15
 
1. JDK is used to develop application like Web App, Websites, Mobile App
2. JDK has diffrent version kile 
3. JDK includes JVM, JRE

 Implementations of JDK:
	1. Enterprise Edition 
	2. Standadrd Edition 
	4. Micro Edition (For Mobile App)
	
	
	
Language Fundamentals:

1. Identifiers
	Identifiers used for identification purpose, ex. class name, method name, variable name etc.
	
public class Test {
	int id;
	String name;
	public static void main(String[] args) {
		System.out.println(s);
	}
}
	Above Simple class is with below identification details.
	i. Test -> class name
	ii. main -> method name 
	iii. name -> variable name
	iv. String -> Predefined class
	v. args -> variable name, method parameter
	vi. id -> variable name
	
Rules for defining java identifiers
1. Allowed characters in identifiers are alphnumeric, A-Z, a-z, 0-9, $ sign, and _ (Underscore).
	ex. Abc@ -> Invalid identifier
		Abc123 -> valid identifier
2. Identifiers should not start with digits
	ex. 123employeeId -> invalid
		employeeId123 -> valid
3. Java Identifiersare case sensitive
	ex. Abc and abc are diffrent 
4. No limit for length of identifier
	ex. char dhjksfksdhfksjfffffffffffffffffffffffffffsfjksfhksjhfkshfkshjkfhsjkhfksjhfskbfmsbfsnmfb;
	 (4 to 15 characters are recommanded for length)
5. Reserved words can'nt be used as identifiers
	ex. int employeeid=10; -> valid
		int while=20; -> invalid
		
Keywords in Java:
	- Keywords are reserved words which are with predefined meaning or represent some predefined actions.

	1. abstract - used on methods or classes to define abstract method and abstract classes.
	2. assert - Assert used for verifying the desired result of code.
	3. boolean - data type , possible values true and false.
	4. break - control statement for breaking our of loop
	5. byte - data type, can hold 8 bit 
	6. case - used in switch statemet 
	7. char - data type, can hold 16-bit unicode character
	8. class - to Declare a class
	9. continue - Sends control back to outside loop.
	10. catch - caches exception genrated in try block
	11. default - specifies the default case in switch / in java 8 to declare method as default in interface
	12. do - to declare do-while loop
	13. double - data type, can hold 64 bit floating point value
	14. enum - to declare enumeration type
	15. else - indicates alternative for if statement
	16. extends - indicates that class is derived from parent class
	17. final - used on variabled and methods, to make them as final and canot be chnaged
	18. finally - used with try-catch block - finally block executed always 
	19. float - data type, can hold 32 bit values/numbers
	20. for - used to start for loop
	21. if - to test condition and control the flow
	22. import -  reference other classes in class
	23. instanceof - indicated weather an object is instance of specific class or not
	24. implements - to implement interfaces on class
	25. int - data type, can hold 32 bit numbers
	26. interface - to declare interface
	27. long - data type , can hold 64 bit values
	28. new - create new objcet of class
	29. null - indicate that object has no reference
	30. native - used on methods , to implement platform specific code
	31. private - access specifier
	32. protected - access specifier
	33. public - access specifier
	34. package - to declare java package
	35. return - to return the values from function/method
	36. static - is unsed on variable and methods, 
	37. short - data type, can hold 16 bit numbers/integers
	38. super - refers to the parent class, 
	39. strictfp - restrict precisio and rounding of floating point numbers.
	40. switch - to execute code on some maching condtion
	41. synchronised - can be used on methods or block. used on multithreading.
	42. this - used to refeer the class level/instance variables.
	43. throw - used in exception handling
	44. throws - exception handling
	45. transient - to make it not to save in DB.
	46. try -  used in excetion handling
	47. true - is boolean type value
	48. false - is boolean type values
	49. void - return type of method, which means retuning nothing.
	50. volatile - used in multithreading, to maintain updated value of the variable.
	51. while - used in while loop
	52. const - future use
	53. goto - future use
	
	
Java Code Comments

	1. Single line comments -> using //
	2. Multi line comment -> /* ........... */
	
	Why comments in code -> Comments helps developer to understand functinality of method or class, also assumptions in code if any.


Data Types in Java.

 1. Primitive Data Types
	i. byte - 1 byte - can store numbers between -128 to + 128
	ii. short - 2 bytes - can store numbers -32768 to +32767 (whole numbers)
	iii. int - 4 bytes - can hold numbers -2,14,7483,648 to 2147483647 (whole numbers)
	iv. long - 8 bytes - (whole numbers)
	v. float - 4 bytes - fraction numbes , Decimal digits 6 to 7
	vi. double - 8 byte - fraction number , decimal digit up to 15
	vii. boolean - 1 byte - tue or false valid values.
	viii. char - 2 bytes - Stores single character or  ASCII values (A -> 65, B 66, )
	
	Numbers in Java in 2 groups.
		1. Interger Type - byte, short, int , long.
		2. Floating Point - float, double.
	
	 
 2. Non-Primitive Data Types
	
	1. non-primitive data types are either predefined or created by user.



















	

	
	
	
	














